#include <iostream>
#include "color.h"
//using namespace std;
Color::Color()
{
	red=0;
	green=0;
	blue=0;
	reset=true;
}
Color::Color(int r, int g, int b)
{
	red=r;
	green=g;
	blue=b;
	reset=false;
}
std::string Color::to_string()
{
	if (reset==false)
	{
	        std::string s="(";
	        s.append(std::to_string(red));
	        s.append(",");
	        s.append(std::to_string(green));
	        s.append(",");
	        s.append(std::to_string(blue));
	        s.append(")");
	        return(s);
	}
	else
	{
	        std::string s="(Reset)";
	        return(s);
	}
}

std::string Color::colorize(std::string text)
{
	if (reset==false)
	{
	        std::string s1="\033[38;2;";
	        s1.append(std::to_string(red));
	        s1.append(";");
	        s1.append(std::to_string(green));
	        s1.append(";");
	        s1.append(std::to_string(blue));
	        s1.append("m");
	        s1.append(text);
	        s1.append("\33[0m");
	        return(s1);
	}
	else return(text);
}


std::ostream& operator<<(std::ostream& ost, Color C)
{
    
    	if (C.reset==false)
    	{
        	ost<<"\033[38;2;"<<std::to_string(C.red)<<";"<<std::to_string(C.green)<<";"<<std::to_string(C.blue)<<"m"<<C.to_string()<<"\033[0m"<<std::endl;
    	}
    	else
        	ost<<"\033[0m"<<C.to_string()<<std::endl;
    	return(ost);
    
}

